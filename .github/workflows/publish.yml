name: Publish

on:
  release:
    types: [published]

jobs:
  ci:
    name: Run CI
    uses: ./.github/workflows/ci.yml

  check-version:
    name: Check if version changed
    runs-on: ubuntu-latest
    needs: ci
    outputs:
      should-publish: ${{ steps.version-check.outputs.should-publish }}
      package-version: ${{ steps.version-check.outputs.package-version }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check if version changed
        id: version-check
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          RELEASE_TAG=${GITHUB_REF#refs/tags/}

          echo "Package version: v$PACKAGE_VERSION"
          echo "Release tag: $RELEASE_TAG"
          echo "package-version=v$PACKAGE_VERSION" >> $GITHUB_OUTPUT

          # Check if package.json version matches the release tag
          if [ "v$PACKAGE_VERSION" != "$RELEASE_TAG" ]; then
            echo "❌ Package version (v$PACKAGE_VERSION) doesn't match release tag ($RELEASE_TAG)"
            echo "should-publish=false" >> $GITHUB_OUTPUT
            exit 1
          fi

          # Check if this version already exists on npm
          NPM_VERSION=$(npm view @typhoonworks/claude-config@$PACKAGE_VERSION version 2>/dev/null || echo "")

          if [ "$NPM_VERSION" = "$PACKAGE_VERSION" ]; then
            echo "⚠️ Version $PACKAGE_VERSION already exists on npm - skipping publish"
            echo "should-publish=false" >> $GITHUB_OUTPUT
          else
            echo "✅ Version $PACKAGE_VERSION is new - will publish"
            echo "should-publish=true" >> $GITHUB_OUTPUT
          fi

  publish-npm:
    name: Publish to npm
    runs-on: ubuntu-latest
    needs: [ci, check-version]
    if: success() && needs.check-version.outputs.should-publish == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          registry-url: https://registry.npmjs.org/
          cache: 'npm'

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: node-modules-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            node-modules-${{ runner.os }}-

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Publish to npm
        run: |
          echo "📦 Publishing version ${{ needs.check-version.outputs.package-version }} to npm..."
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Success notification
        run: |
          echo "🎉 Successfully published ${{ needs.check-version.outputs.package-version }} to npm!"

  publish-github:
    name: Publish to GitHub Packages
    runs-on: ubuntu-latest
    needs: [ci, check-version]
    if: success() && needs.check-version.outputs.should-publish == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.x
          registry-url: https://npm.pkg.github.com/
          cache: 'npm'

      - name: Cache node modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: node-modules-${{ runner.os }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            node-modules-${{ runner.os }}-

      - name: Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: Configure package for GitHub registry
        run: |
          # Update package.json for GitHub Packages
          npm pkg set publishConfig.registry="https://npm.pkg.github.com"

      - name: Publish to GitHub Packages
        run: |
          echo "📦 Publishing version ${{ needs.check-version.outputs.package-version }} to GitHub Packages..."
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Success notification
        run: |
          echo "🎉 Successfully published ${{ needs.check-version.outputs.package-version }} to GitHub Packages!"
